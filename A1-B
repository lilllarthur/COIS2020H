using System;
using System.Collections.Generic;
public class MyString
{
    private class Node
    {
        public char item;
        public Node next;
        // Constructor (2 marks)
        public Node(char Item, Node next)
        {
            this.item = Item;
            this.next = next;
        }
    }

    private Node front; // Reference to the first (header) node
    private int length; // Number of characters in MyString
    private Node back;

    //Set it to default
    public MyString()
    {
        front = null;
        length = 0;
    }

    // Initialize with a header node an instance of MyString to the given character array A (4 marks)
    public MyString(char[] A)
    {
        front = new Node(A[0], null);
        length = A.Length;
        for (int i = 0; i < (A.Length - 1); i++)
        {
            front.next = new Node(A[(length - 1) - i], front.next);
        }
    }
    // Using a stack, reverse this instance of MyString (6 marks)
    public void Reverse()
    {
        Stack<char> S = new Stack<char>();
        Node curr = front;
        while (curr != null)
        {
            S.Push(curr.item);
            curr = curr.next;
        }
        curr = front;
        while (curr != null)
        {
            curr.item = S.Pop();
            curr = curr.next;
        }
    }
    // Return the index of the first occurrence of c in this instance; otherwise -1 (4 marks)
    public int IndexOf(char c)
    {
        Node curr = front;
        for (int i = 0; i < length; i++)
        {
            if (curr.item.Equals(c))
            {
                return i;
            }
            curr = curr.next;
        }
        return -1;
    }

    // Remove all occurrences of c from this instance (4 marks)
    public void Remove(char c)
    {
        bool found = false;
        Node curr = front;
        while (curr.next != null && !found)
        {
            if (curr.next.item.Equals(c))
            {
                curr.next = curr.next.next;
                if (curr.next == null)
                    back = curr;
                found = true;
                length--;
            }
            else
            {
                curr = curr.next;
            }
        }
    }
    // Return true if obj is both of type MyString and the same as this instance;
    // otherwise false (6 marks)
    public override bool Equals(object obj)
    {
        if (this.GetType() != obj.GetType())
        {
            return false;
        }
        if (obj == null)
        {
            return false;
        }
        MyString L = (MyString)obj;
        if (this.length != L.length)
        {
            return false;
        }
        for (int i = 0; i < this.length; i++)
        {
            if (this.front.next.item != L.front.next.item)
            {
                return false;
            }
            this.front = this.front.next;
            L.front = L.front.next;
        }
        return true;
    }
    // Print out this instance of MyString (3 marks)
    public void Print()
    {
        Node curr = front;
        while (curr != null)
        {
            Console.Write(curr.item);
            curr = curr.next;
        }
    }
    public static void Main()
    {
        MyString L = new MyString();
        do
        {
            Console.Write("Enter your string: ");
            string s = Console.ReadLine();
            char[] items = s.ToCharArray();
            L = new MyString(items);
            L.Print();
            Console.WriteLine();
            Console.WriteLine("1. Remove one character from the string");
            Console.WriteLine("2. Reverse the string");
            Console.WriteLine("3. Return the index of a character");
            Console.WriteLine("4. Check if obj is both of type MyString and the same as this instance");
            Console.WriteLine("5. Exit");
            Console.Write("Enter your choice: ");
            string input = Console.ReadLine();
            char firstChar = input[0];
            bool isNum = Char.IsDigit(firstChar);
            if (!isNum)
            {
                Console.WriteLine("Error! You have to enter a number");
            }
            else
            {
                int num = Int32.Parse(input);
                //Remove a char
                if (num == 1)
                {
                    Console.Write("Enter the character you want to remove: ");
                    char r = Convert.ToChar(Console.ReadLine());
                    L.Remove(r);
                    L.Print();
                    Console.WriteLine();
                }
                //Reverse the string
                else if (num == 2)
                {
                    L.Reverse();
                    L.Print();
                    Console.WriteLine();
                }
                //Return the index
                else if (num == 3)
                {
                    Console.Write("Enter a character you want to print the index of: ");
                    char i = Convert.ToChar(Console.ReadLine());
                    Console.WriteLine("The index of the first occurrence of the letter " + i + " is: " + L.IndexOf(i));
                }
                // Check type
                else if (num == 4)
                {
                    Console.Write("Enter string 1: ");
                    string s1 = Console.ReadLine();
                    Console.Write("Enter string 2: ");
                    string s2 = Console.ReadLine();
                    Console.WriteLine(L.Equals(s1));
                    Console.WriteLine(L.Equals(s2));
                }
                //Exit
                else if (num == 3)
                {
                    break;
                }
            }
        } while (true);
    }
}
